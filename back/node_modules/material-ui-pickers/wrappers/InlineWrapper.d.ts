import { Omit } from '@material-ui/core';
import { PopoverProps as PopoverPropsType } from '@material-ui/core/Popover';
import { WithStyles } from '@material-ui/core/styles/withStyles';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { DateTextFieldProps } from '../_shared/DateTextField';
export interface OuterInlineWrapperProps extends Omit<DateTextFieldProps, 'utils' | 'onClick'> {
    /** On open callback */
    onOpen?: () => void;
    /** On close callback */
    onClose?: () => void;
    /** Dialog props passed to material-ui Dialog */
    PopoverProps?: Partial<PopoverPropsType>;
}
export interface InlineWrapperProps extends OuterInlineWrapperProps {
    handleAccept: () => void;
    isAccepted: boolean;
    /** Show only calendar for datepicker in popover mode */
    onlyCalendar: boolean;
}
export declare class InlineWrapper extends React.PureComponent<InlineWrapperProps & WithStyles<typeof styles>> {
    static propTypes: any;
    static defaultProps: {
        value: Date;
        onlyCalendar: boolean;
        isAccepted: boolean;
    };
    static getDerivedStateFromProps(nextProps: InlineWrapperProps): {
        anchorEl: null;
    } | null;
    state: {
        anchorEl: null;
    };
    open: (e: React.SyntheticEvent<Element, Event>) => void;
    close: () => void;
    handleKeyDown: (event: Event) => void;
    render(): JSX.Element;
}
export declare const styles: {
    popoverPaper: {
        width: number;
        paddingBottom: number;
    };
};
declare const _default: React.ComponentType<Pick<InlineWrapperProps & {
    classes: Record<"popoverPaper", string>;
    innerRef?: ((instance: any) => void) | React.RefObject<any> | null | undefined;
} & Pick<PropTypes.InferProps<any>, string | number | symbol>, string | number | symbol> & import("@material-ui/core").StyledComponentProps<"popoverPaper">>;
export default _default;
