"use strict";
import pose from '../';
var div = document.createElement('div');
var poser = pose(div, {
    foo: { backgroundColor: '#fff' },
    bar: { backgroundColor: '#000' },
    instantTransition: {
        backgroundColor: '#0f0',
        transition: false
    },
    customTransitionDef: {
        backgroundColor: '#f00',
        transition: { type: 'tween' }
    },
    customNamedTransitionDef: {
        backgroundColor: '#00f',
        transition: {
            backgroundColor: { type: 'spring', to: '#000' }
        }
    },
    failTransition: {
        backgroundColor: true,
        transition: {
            backgroundColor: { type: 'face' }
        }
    },
    initialPose: 'foo',
    delayedTransition: {
        backgroundColor: '#eee',
        transition: {
            delay: 100,
            duration: 0
        }
    }
});
test('initial pose', function () {
    expect(poser.get('backgroundColor').get()).toBe('#fff');
});
test('default animation', function () {
    return poser.set('bar').then(function () {
        expect(poser.get('backgroundColor').get()).toBe('rgba(0, 0, 0, 1)');
    });
});
test('instant transition', function () {
    return poser.set('instantTransition').then(function () {
        expect(poser.get('backgroundColor').get()).toBe('#0f0');
    });
});
test('transition definition', function () {
    return poser.set('customTransitionDef').then(function () {
        expect(poser.get('backgroundColor').get()).toBe('rgba(255, 0, 0, 1)');
    });
});
test('named transition definition with custom to', function () {
    return poser.set('customNamedTransitionDef').then(function () {
        expect(poser.get('backgroundColor').get()).toBe('rgba(0, 0, 0, 1)');
    });
});
test('delay transition', function (done) {
    setTimeout(function () {
        expect(poser.get('backgroundColor').get()).toBe('rgba(0, 0, 0, 1)');
        done();
    }, 50);
    poser.set('delayedTransition');
});
//# sourceMappingURL=index.js.map