"use strict";
import { spring, tween, action, easing, pointer, transform } from 'popmotion';
import { eachValue } from './transition-composers';
import { BoundingBoxDimension } from '../types';
import { percent } from 'style-value-types';
var linear = easing.linear;
var interpolate = transform.interpolate;
var singleAxisPointer = function (axis) { return function (from) {
    return pointer((_a = {}, _a[axis] = from, _a)).pipe(function (v) { return v[axis]; });
    var _a;
}; };
var pointerX = singleAxisPointer('x');
var pointerY = singleAxisPointer('y');
var createPointer = function (axisPointerCreator, min, max, measurement) { return function (_a) {
    var from = _a.from, type = _a.type, dimensions = _a.dimensions, dragBounds = _a.dragBounds;
    var axisPointer = axisPointerCreator(dimensions.measurementAsPixels(measurement, from, type));
    var transformQueue = [];
    if (dragBounds) {
        if (dragBounds[min] !== undefined)
            transformQueue.push(function (v) {
                return Math.max(v, dimensions.measurementAsPixels(measurement, dragBounds[min], type));
            });
        if (dragBounds[max] !== undefined)
            transformQueue.push(function (v) {
                return Math.min(v, dimensions.measurementAsPixels(measurement, dragBounds[max], type));
            });
    }
    if (type === percent) {
        transformQueue.push(interpolate([0, dimensions.get(measurement)], [0, 100]));
    }
    return transformQueue.length
        ? axisPointer.pipe.apply(axisPointer, transformQueue) : axisPointer;
}; };
export var just = function (from) {
    return action(function (_a) {
        var update = _a.update, complete = _a.complete;
        update(from);
        complete();
    });
};
var underDampedSpring = function (_a) {
    var from = _a.from, velocity = _a.velocity, to = _a.to;
    return spring({
        from: from,
        to: to,
        velocity: velocity,
        stiffness: 500,
        damping: 25,
        restDelta: 0.5,
        restSpeed: 10
    });
};
var overDampedSpring = function (_a) {
    var from = _a.from, velocity = _a.velocity, to = _a.to;
    return spring({ from: from, to: to, velocity: velocity, stiffness: 700, damping: to === 0 ? 100 : 35 });
};
var linearTween = function (_a) {
    var from = _a.from, to = _a.to;
    return tween({ from: from, to: to, ease: linear });
};
var intelligentTransition = eachValue({
    x: underDampedSpring,
    y: underDampedSpring,
    z: underDampedSpring,
    rotate: underDampedSpring,
    rotateX: underDampedSpring,
    rotateY: underDampedSpring,
    rotateZ: underDampedSpring,
    scaleX: overDampedSpring,
    scaleY: overDampedSpring,
    scale: overDampedSpring,
    opacity: linearTween,
    default: tween
});
var dragAction = eachValue({
    x: createPointer(pointerX, 'left', 'right', BoundingBoxDimension.width),
    y: createPointer(pointerY, 'top', 'bottom', BoundingBoxDimension.height)
});
var intelligentDragEnd = function (_a) {
    var from = _a.from;
    return just(from);
};
export default new Map([
    ['default', intelligentTransition],
    ['dragging', dragAction],
    ['dragEnd', intelligentDragEnd]
]);
//# sourceMappingURL=default-transitions.js.map